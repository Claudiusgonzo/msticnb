#Multi-configuration and multi-agent job options are not exported to YAML. Configure these options using documentation guidance: https://docs.microsoft.com/vsts/pipelines/process/phases

stages:
- stage: PythonTests
  variables:
    # This is run explicity so does not need to be auto-injected
    skipComponentGovernanceDetection: true
  jobs:
  - job: InstallAndTestPackage
    pool:
      vmImage: ubuntu-latest
    variables:
      python.version: '3.6'
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
    - script: |
        python3 -m pip install --upgrade pip wheel
        python3 -m pip install -e .
      displayName: 'Install package and dependencies'
    - script: |
        echo Using $MSTICPYCONFIG or %MSTICPYCONFIG%
        export MSTICPYCONFIG=$MSTICPYCONFIG/msticnb/tests/testdata/msticpyconfig-test.yaml
        printenv MSTICPYCONFIG
        python3 -m pip install --upgrade pytest
        python3 -m pip install --upgrade pytest-cov

        export MSTICPY_TEST_NOSKIP=1
        pytest msticnb/tests --junitxml=junit/test-results.xml --cov=msticnb --cov-report=xml
        REM --cov-report=html
      continueOnError: true
      condition: succeededOrFailed()
      displayName: pytest
      env:
        MSTICPYCONFIG: $(Build.SourcesDirectory)
        MAXMIND_AUTH: $(maxmind_auth)
        IPSTACK_AUTH: $(ipstack_auth)
    - script: |
        python3 -m pip install --upgrade black
        black -t py36 --check --exclude venv . 
      displayName: Black
      continueOnError: true
      condition: succeededOrFailed()
    - script: |
        python3 -m pip install --upgrade pylint
        pylint msticnb --disable=bad-continuation 
      displayName: Pylint
      continueOnError: true
      condition: succeededOrFailed()
    - script: |
        python3 -m pip install --upgrade bandit
        bandit -x tests -r -s B303,B404,B603,B607 msticnb'
      displayName: bandit
      continueOnError: true
      condition: succeededOrFailed()
    - script: |
        python3 -m pip install --upgrade flake8 
        flake8 --max-line-length=90 --exclude=tests* . --ignore=E501,W503
      displayName: flake8
      continueOnError: true
      condition: succeededOrFailed()
    - script: |
        #setx MYPYPATH "C:/hostedtoolcache/windows/Python/3.6.8/x64/Lib/site-packages"
        python3 -m pip install prospector[with_everything]
        prospector --ignore-paths tests --with-tool mypy
      displayName: prospector
      continueOnError: true
      condition: succeededOrFailed()

- stage: GenericTests
  dependsOn:
  - PythonTests
  condition: succeeded('PythonTests')
  variables:
    # This is run explicity so does not need to be auto-injected
    skipComponentGovernanceDetection: true
  jobs:
  - job: PipelineTests
    pool:
      vmImage: windows-latest
    variables:
      python.version: '3.6'
    steps:
    - task: CredScan@2
      displayName: 'Run CredScan'
      inputs:
        toolMajorVersion: V2
        debugMode: false
      continueOnError: true
      condition: succeededOrFailed()
    - task: dependency-check-build-task@5
      displayName: 'OWASP Dependency Check'
      inputs:
        projectName: msticpy
        scanPath: '$(Build.SourcesDirectory)'
        format: 'JUNIT'
        suppressionPath: '$(Build.SourcesDirectory)'
    - task: AutoApplicability@1
      inputs:
        ExternalRelease: true
      displayName: 'Run AutoApplicability'
    - task: PoliCheck@1
      displayName: 'Run PoliCheck'
      inputs:
        targetType: F
    - task: VulnerabilityAssessment@0
      displayName: 'Run Vulnerability Assessment'
    - task: ComponentGovernanceComponentDetection@0
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        alertWarningLevel: 'High'
      displayName: 'Component Detection'
    - task: AntiMalware@3
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.StagingDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'
      continueOnError: true
      condition: succeededOrFailed()
- stage: PublishTests
  dependsOn:
  - GenericTests
  condition: succeeded('GenericTests')
  variables:
    # This is run explicity so does not need to be auto-injected
    skipComponentGovernanceDetection: true
  jobs:
  - job: PublishTestResults
    pool:
      vmImage: windows-latest
    variables:
      python.version: '3.6'
    steps:
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: '**/*-results.xml'
        testRunTitle: 'Python $(python.version)'
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
      displayName: 'Create Security Analysis Report'
      inputs:
        CredScan: true
        PoliCheck: true
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
      displayName: 'Publish Security Analysis Logs'
      inputs:
        AllTools: false
        AntiMalware: true
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        FortifySCA: false
        FxCop: false
        ModernCop: false
        MSRD: false
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        WebScout: false
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
      displayName: 'Post Analysis'
      inputs:
        CredScan: true

- stage: CreatePythonPackage
  dependsOn:
  - PublishTests
  variables:
    # This is run explicity so does not need to be auto-injected
    skipComponentGovernanceDetection: true
  condition: succeeded('PublishTests')
  jobs:
  - job: CreateDistPackage
    pool:
      vmImage: windows-latest
    variables:
      python.version: '3.6'
    steps:
    - script: 'pip install --upgrade setuptools wheel'
      displayName: 'Install setuptools'
    - script: 'python setup.py sdist bdist_wheel'
      displayName: 'Build sdist and wheel'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: msticnb'
      inputs:
        PathtoPublish: dist
        ArtifactName: msticnb